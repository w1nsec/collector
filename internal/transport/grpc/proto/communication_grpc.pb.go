// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: internal/transport/grpc/proto/communication.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetricsSvc_StoreMetrics_FullMethodName = "/MetricsSvc/StoreMetrics"
	MetricsSvc_ListMetrics_FullMethodName  = "/MetricsSvc/ListMetrics"
)

// MetricsSvcClient is the client API for MetricsSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsSvcClient interface {
	StoreMetrics(ctx context.Context, in *Metrics, opts ...grpc.CallOption) (*StoreResponse, error)
	ListMetrics(ctx context.Context, in *ListMetricsReq, opts ...grpc.CallOption) (*Metrics, error)
}

type metricsSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsSvcClient(cc grpc.ClientConnInterface) MetricsSvcClient {
	return &metricsSvcClient{cc}
}

func (c *metricsSvcClient) StoreMetrics(ctx context.Context, in *Metrics, opts ...grpc.CallOption) (*StoreResponse, error) {
	out := new(StoreResponse)
	err := c.cc.Invoke(ctx, MetricsSvc_StoreMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsSvcClient) ListMetrics(ctx context.Context, in *ListMetricsReq, opts ...grpc.CallOption) (*Metrics, error) {
	out := new(Metrics)
	err := c.cc.Invoke(ctx, MetricsSvc_ListMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsSvcServer is the server API for MetricsSvc service.
// All implementations must embed UnimplementedMetricsSvcServer
// for forward compatibility
type MetricsSvcServer interface {
	StoreMetrics(context.Context, *Metrics) (*StoreResponse, error)
	ListMetrics(context.Context, *ListMetricsReq) (*Metrics, error)
	mustEmbedUnimplementedMetricsSvcServer()
}

// UnimplementedMetricsSvcServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsSvcServer struct {
}

func (UnimplementedMetricsSvcServer) StoreMetrics(context.Context, *Metrics) (*StoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreMetrics not implemented")
}
func (UnimplementedMetricsSvcServer) ListMetrics(context.Context, *ListMetricsReq) (*Metrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMetrics not implemented")
}
func (UnimplementedMetricsSvcServer) mustEmbedUnimplementedMetricsSvcServer() {}

// UnsafeMetricsSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsSvcServer will
// result in compilation errors.
type UnsafeMetricsSvcServer interface {
	mustEmbedUnimplementedMetricsSvcServer()
}

func RegisterMetricsSvcServer(s grpc.ServiceRegistrar, srv MetricsSvcServer) {
	s.RegisterService(&MetricsSvc_ServiceDesc, srv)
}

func _MetricsSvc_StoreMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsSvcServer).StoreMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsSvc_StoreMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsSvcServer).StoreMetrics(ctx, req.(*Metrics))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsSvc_ListMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMetricsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsSvcServer).ListMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsSvc_ListMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsSvcServer).ListMetrics(ctx, req.(*ListMetricsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsSvc_ServiceDesc is the grpc.ServiceDesc for MetricsSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MetricsSvc",
	HandlerType: (*MetricsSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreMetrics",
			Handler:    _MetricsSvc_StoreMetrics_Handler,
		},
		{
			MethodName: "ListMetrics",
			Handler:    _MetricsSvc_ListMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/transport/grpc/proto/communication.proto",
}
